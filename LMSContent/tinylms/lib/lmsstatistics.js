/*
 * @(#)lmstatistics.js 1.1 2003-11-04
 *
 * Copyright (c) 2003 Werner Randelshofer
 * Staldenmattweg 2, Immensee, CH-6405, Switzerland
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of 
 * Werner Randelshofer. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Werner Randelshofer.
 */ 
/**
 * This scripts inserts a table of contents (TOC) at the current location
 * into a HTML document.
 *
 * This file is intended to be included in the body of a HTML document. The
 * HTML document must be in a child frame of the Learning Management System
 * generated by TinyLMS.
 *
 * Example:
 * <html>
 *   <head>
 *     <title>Table Of Contens</title>
 *     <script language="JavaScript" src="lib/lmscollections.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsfonts.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmslabels.js" type="text/JavaScript"></script>
 *     <script language="JavaScript" src="lib/lmsstub.js" type="text/JavaScript"></script>
 *   </head>
 *   <body>
 *     <script language="JavaScript" src="lib/lmstatistics.js" type="text/JavaScript"></script>
 *   </body>
 * </html>
 *
 * @version 1.1 2003-11-04 Use language independent labels. Adapted to changes in
 * lmsapi.js and lmscam.js
 * <br>1.0 2003-10-30 Updated. 
 * <br>0.1 2003-03-28 Created.
 */



/**
 * Writes the name of the organization.
 *
 * @param node the root of the subtree.
 * @param depth The depth of the node in the TOC tree.
 */
function Statistics_writeOrganization() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
 		var currentOrganization = api.getCurrentOrganization();
	  document.write((currentOrganization == null) ? "---" : currentOrganization.title);
	};
}
/**
 * Writes a toc subtree starting from the specified toc item.
 *
 * @param node the root of the subtree.
 * @param depth The depth of the node in the TOC tree.
 */
function Statistics_writeSubtree(node, depth) {
	var title = cropString(node.title, 28 - depth * 2);
	var resource = node.getResource();
	var lessonStatus = (resource == null) ? "" : resource.cmi_core_lesson_status;
	var i;
	
	document.writeln('<tr>');
	document.write('<td class="statistics">');
	for (i=0; i < depth; i++) {
	  document.write('&nbsp;&nbsp;');
	}
	if (resource != null) document.write('<a class="statistics" href="#" onClick="stub.getAPI().gotoItemWithID(\''+node.identifier+'\');return false;">');
	document.write(title);
	if (resource != null) document.writeln('</a>');
	document.writeln('</td>');
	document.write('<td class="statistics">');
	switch (lessonStatus) {
		case "passed" :
		case "completed" :
		case "failed" :
		case "incomplete" :
		case "browsed" :
			document.write('<img src="images/symbols/sym_toc_browsed.gif" width="12" height="9" border="0">');
			break;
		case "not attempted" :
		case "" :
		case null :
		default :
			document.write('<img src="images/symbols/sym_toc_spacer.gif" width="12" height="9" border="0">');
			break;
	}
	document.writeln('</td>');
	document.write('<td class="statistics">');
	switch (lessonStatus) {
		case "passed" :
		case "completed" :
			document.write('<img src="images/symbols/sym_toc_passed.gif" width="12" height="9" border="0">');
			break;
		case "failed" :
		case "incomplete" :
			document.write('<img src="images/symbols/sym_toc_failed.gif" width="12" height="9" border="0">');
			break;
		case "browsed" :
			document.write('<img src="images/symbols/sym_toc_browsed.gif" width="12" height="9" border="0">');
			break;
		case "not attempted" :
		case "" :
		case null :
		default :
			document.write('<img src="images/symbols/sym_toc_spacer.gif" width="12" height="9" border="0">');
			break;
	}
	document.writeln('</td>');
	document.writeln('<tr>');

	for (i=0; i < node.getChildCount(); i++) {
		this.writeSubtree(node.getChildAt(i), depth + 1);
	}
}

/**
 * Writes detailed statistics.
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
function Statistics_writeStatistics() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
		document.writeln('<table border="0" cellspacing="1" cellpadding="0">');
		document.writeln('<tr>');
		document.writeln('<td width="230" class="statisticsTitle">'+api.labels.get("statistics.pages")+'</td>');
		document.writeln('<td width="65" class="statisticsTitle">'+api.labels.get("statistics.viewed")+'</td>');
		document.writeln('<td width="65" class="statisticsTitle">'+api.labels.get("statistics.passed")+'</td>');
		document.writeln('</tr>');
		
 		var currentOrganization = api.getCurrentOrganization();
		for (var i=0; i < currentOrganization.getChildCount(); i++) {
			var child = currentOrganization.getChildAt(i);
			this.writeSubtree(child, 0);
		}
		
		document.writeln("</table>");
	}
}
/**
 * Writes a summary.
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
function Statistics_writeSummary() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
		var currentOrganization = api.getCurrentOrganization();
		var pageCount = 0;
		var visitedCount = 0;
		var passedCount = 0;
		var failedCount = 0;
		var exercisesCount = 0;
		var nodeCount = 0;
		var node = currentOrganization.getFirstLeaf();
		while (node != null && node != currentOrganization) {
		  nodeCount++;
			if (node.isItemElement && node.getResource() != null) {
				 pageCount++;
				 
				 var resource = node.getResource();
				 switch (resource.cmi_core_lesson_status) {
						case "passed" :
						case "completed" :
							passedCount++;
							visitedCount++;
							exercisesCount++;
							break;
						case "failed" :
						case "incomplete" :
							failedCount++;
							exercisesCount++;
							visitedCount++;
							break;
						case "browsed" :
							//failedCount++;
							exercisesCount++;
							visitedCount++;
							break;
						case "not attempted" :
							exercisesCount++;
							break;
						case "" :
						case null :
						default :
							exercisesCount++;
							break;
					}
			}
			node = node.getNextNode();
		}
		/*
		document.write('nodeCount:'+nodeCount+'<br>');
		document.write('pageCount:'+pageCount+'<br>');
		document.write('visitedCount:'+visitedCount+'<br>');
		document.write('passedCount:'+passedCount+'<br>');
		document.write('failedCount:'+failedCount+'<br>');
		document.write('exercisesCount:'+exercisesCount+'<br>');*/
		document.write(api.labels.format("statistics.pagesvisited", [visitedCount, pageCount])+'<br>');
		if (failedCount != 0) {
			document.write(api.labels.format("statistics.pagesfailed", [failedCount])+'<br>');
		}
	}
}
/**
 * Clears the statistics
 * The TOC entries are retrieved from the LMS using 
 * protected operations.
 */
function Statistics_clearStatistics() {
	var api = stub.getAPI();
	if (api.isLoggedIn()) {
	  api.clearDatabase();
		api.gotoMenu();
	}
}



function Statistics() {
	this.writeSummary = Statistics_writeSummary;
	this.writeStatistics = Statistics_writeStatistics;
	this.writeSubtree = Statistics_writeSubtree;
	this.clearStatistics = Statistics_clearStatistics;
	this.writeOrganization = Statistics_writeOrganization;
}

var statistics = new Statistics();
